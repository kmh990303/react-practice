# children prop
-> 컴포넌트 텍스트의 내용을 가리킴
-> 혹은 복잡한 jsx 구조일 수 있음
!! 열림과 닫힘 태그 사이에 있는 내용을 전달하는데 사용한다

# 리액트 훅의 규칙 두 가지
- 컴포넌트 함수 안에서 바로 호출해야 함
- 다른 코드 안에 중첩되면 안됨
- 다른 내부 함수에 중첩되거나 if문 또는 loop 도 안됨

# useState
useState를 사용할 때 나오는 요소는 항상 2개인데, 배열구조분해를 이용해 2개의 요소를 2개의 별도 상수에 저장할 수 있다


# 요소들을 동적으로 리스트에 출력할 때는, 모든 요소는 고유한 키를 받아서 리액트에게 리스트 아이템을 구분 짓도록 알려줘야 한다
-> 리스트 항목들에게는 키 props를 제공하여 요소를 식별할 수 있게 함

# 전체 객체를 prop로 전달해서 전달받으면, 키 값 쌍으로 펼쳐 사용 가능 
ex) {...props}

# JSX는 빌드 과정이 필요
-> 사용하기 쉽고 가독성이 좋음
-> React.createElement(컴포넌트이름)  으로 render 대체 가능

#fragment 컴포넌트 (내장 컴포넌트)
div 대신에 여러 요소를 감쌀 수 있음
혹은 빈 태그를 사용해 감쌀 수 있음

#컴포넌트를 더 작은 단위로 쪼갤 필요 있음

#props와 속성은 같은 것으로 커스텀 컴포넌트에 설정할 떄, 자동으로 적용되거나 해당 컴포넌트 속 JSX 코드로 넘어가지 않는다 -> 아이디나 클래스는 따로 설정을 해줘야 함

# 인자로 '...prop이름' 형태로 작성할 수 있는데, 이는 자바스크립트의 내장 문법이며, 모든 props를 다 모아와서 속성 개체로 병합한다 -> wrapper 객체에 사용하는 것이 용이함

#컴포넌트의 속성에 여러 컴포넌트를 div태그나 프래그먼트로 감싸서 부여할 수 있다'

#내장요소는 중괄호로 감쌀 필요 없음 / 커스텀 컴포넌트 혹은 동적인 값만 중괄호로 감싼다

#Wrapper를 속성으로 지정하여 특정 커스텀 컴포넌트 안에서 사용 가능 ex) div, menu -> 받는 변수가 대문자로 시작해야 함

#컴포넌트에 모든 요소를 다 넣지 않아도 됨
-> 웹사이트 구성 시 헤더 같은 것은 정적인 요소이기 때문에, index.html에 넣어도 된다

#public 폴더에 사진이 있으면 어떤 파일이나 컴포넌트에서도 자유롭게 이미지를 활용할 수 있다 -> index.html 파일과 함께 사이트 방문자에게도 공유된다 -> 따로 public 경로는 지정 안 해도 됨
#반면, 컴포넌트 내에서 사용되는 이미지는 일반적으로 src/ 폴더에 저장되어야 한다

#span 태그는 인라인 태그로 한 줄에 요소를 배치시킬 수 있음

#JSX 코드를 변수 값으로 저장할 수 있다
ex) 변수에 태그를 넣을 수 있음 -> 조건에 따라 다른 태그 값을 넣을 수 있음

# input 입력에서 필수적으로 작성, 입력해야 하는 것은 required 속성 부여한다

# 값을 반전시키는 것은 앞에 물음표를 작성할 것
ex) true -> false

# 상태를 이전 값에 기반하여 변경할 경우 함수를 전달해야 함 
 -> prevState를 인자로 사용할 것 (가장 최신의 상태 값을 활용할 수 있음)

# value 값은 입력창에서 보이는 값을 설정한다 -> 변경하려는 내용을 계속 덮어쓴다 -> 특수한 기본값 속성을 설정한다 -> defaultValue 초기값 설정 -> 특정 값으로 덮어쓰지 못하게 한다 -> 이후에 수정 가능

#event.target.value
작성하는 값

# 객체나 배열에 대한 상태를 업데이트할 때, 변경 불가능하게 하는 것이 좋다. 이전 상태를 하나 복제해서 사용하는 방식 이용할 것 -> 자바스크립트의 참조 값
=> 스프레드 연산자 사용

#이중배열의 경우 외부 배열과 내부 배열에 대해 스프레드연산자를 각각 수행해 깊은 복사를 수행한다 -> 외부 배열만 스프레드 연산자로 받아오면 얕은 복사가 진행되어 어느 쪽이 변경되면 다른 쪽도 요소가 바뀌게 됨

position: relative -> 원래 요소의 위치를 기준으로 이동
position: absolute -> 가장 가까운 position 속성이 설정된 조상 요소를 기준으로 배치

# 소괄호 ()를 사용하면 암시적인 return이 적용된다. but, 화살표 함수에서 중괄호 {}를 사용하면 명시적인 return 문이 필요하다.
+ map 메소드 내에서 JSX를 직접 반환하기 때문에 별도의 return 문이 필요하지 않다.
